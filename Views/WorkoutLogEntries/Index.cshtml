@model IEnumerable<WellnessTracker.Models.WorkoutLogEntry>

@{
    ViewData["Title"] = "Index";
}
<h1>Workout Log Entries</h1>
@{
    var goal = ViewBag.WorkoutGoal as double?;
    var total = ViewBag.TodayWorkout as double? ?? 0;
    var percentage = (int)(ViewBag.WorkoutPercentage ?? 0.0);
    int currentOffset = ViewBag.WeekOffset ?? 0;
    var weekStart = DateTime.Today.AddDays(currentOffset * 7).AddDays(-(int)DateTime.Today.DayOfWeek + (DateTime.Today.DayOfWeek == DayOfWeek.Sunday ? -6 : 1));
    var weekEnd = weekStart.AddDays(6);


}
    @if (goal.HasValue)
    {
        <div class="mb-4">
            <h4>Today's Workout Progress (@DateTime.Today.ToString("MMMM dd"))</h4>
            <a asp-controller="WorkoutLogEntries" asp-action="SetGoal" class="btn btn-sm btn-outline-primary ms-2">Edit Goal</a>
            <p><strong>Goal:</strong> @goal.Value minutes</p>
            <p><strong>Workout:</strong> @total minutes</p>
        <div class="mb-4">
            <p><strong>Calories Burned: </strong>@ViewBag.TotalCaloriesToday kcal </p>
        </div>

            <div class="progress" style="height: 25px;">
                <div class="progress-bar @(percentage < 100 ? "bg-info" : "bg-success")"
                     role="progressbar"
                     style="width: @percentage%"
                     aria-valuenow="@percentage"
                     aria-valuemin="0"
                     aria-valuemax="100">
                    @percentage%
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            You haven't set a workout goal yet. <a asp-controller="WorkoutLogEntries" asp-action="SetGoal">Set your goal</a>.
        </div>
    }
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <strong>Week:</strong> @weekStart.ToString("MMM dd") - @weekEnd.ToString("MMM dd")
        </div>
        <div>
            <a class="btn btn-outline-secondary me-2" href="@Url.Action("Index", new { weekOffset = currentOffset - 1 })">← Previous Week</a>
            @if (weekEnd < DateTime.Today)
            {
                <a class="btn btn-outline-secondary" href="@Url.Action("Index", new { weekOffset = currentOffset + 1 })">Next Week →</a>
            }
            else
            {
                <button class="btn btn-outline-secondary" disabled>Next Week →</button>
            }
        </div>
    </div>
    <h4>This Week's Workout Breakdown</h4>
    <table class="table table-bordered w-50">
        <thead>
            <tr>
                @foreach (var day in ((IDictionary<string, double>)ViewBag.WeeklyWorkout).Keys)
                {
                    <th>@day</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var Duration in ((IDictionary<string, double>)ViewBag.WeeklyWorkout).Values)
                {
                    <td>@Duration</td>
                }
            </tr>
        </tbody>
    </table>

    <div class="alert alert-info">
        <strong>Weekly Workout Average:</strong> @ViewBag.WeeklyAverageWorkout.ToString("0.##") minutes
        @if (ViewBag.WorkoutGoal != null)
        {
            <span>
                (
                @if (ViewBag.WeeklyAverageWorkout >= ViewBag.WorkoutGoal)
                {
                    <span class="text-success">Above Goal</span>
                }
                else
                {
                    <span class="text-warning">Below Goal</span>
                }
                )
            </span>
        }
    </div>
}
<p>
    <a asp-action="Create">Create New</a>
    <a href="@Url.Action("WorkoutSummary", "WorkoutLogEntries")" class="btn btn-dark">
        View Workout Summary
    </a>

</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ExerciseName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Duration) (Minutes)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CaloriesBurned)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Notes)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @item.Date.ToString("yyyy-MM-dd")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExerciseName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Duration)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CaloriesBurned)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Notes)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
